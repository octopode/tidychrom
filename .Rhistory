reshape2::melt(.$z, varnames = c('T_act_sc', 'P_act_sc'), value.name = 'gp') %>%
as_tibble() %>%
drop_na() %>%
# rescale
mutate(
P_act = P_act_sc/noy * (max(alldata$P_act)-min(alldata$P_act)) + min(alldata$P_act),
T_act = T_act_sc/nox * (max(alldata$T_act)-min(alldata$T_act)) + min(alldata$T_act)
) %>%
#filter((P_act >= 0) & (T_act >= 0)) %>%
ggplot(aes(x=T_act, y=P_act, z=gp, fill=gp)) +
geom_raster() +
geom_contour(color="grey", bins=10) +
scale_fill_distiller(palette="YlGnBu", direction=1) +
geom_point(data = gpdata, color = "black", alpha=0.2, shape=1) +
xlim(range_t) +
ylim(0, max(range_p)) +
scale_y_reverse() +
theme_pubr() +
#theme(legend.position = "bottom") +
theme(legend.position = "none") +
theme(
plot.title = element_text(color = "white"),
axis.title = element_text(color = "white"),
axis.text = element_text(color = "white"),
axis.line = element_line(color = "white"),
axis.ticks = element_line(color = "white"),
panel.background = element_rect(fill = "black", color = NA),
plot.background = element_rect(fill = "black", color = NA)
) +
ggtitle("GP vs. Pressure vs. Temperature") +
labs(x="Temperature (deg C)", y="Pressure (bar)", fill="Laurdan GP") +
guides(fill = guide_colourbar(label.theme = element_text(angle = 45, vjust=0.5)))
message(img_out)
image <- arrangeGrob(plot_pt, plot_gp, ncol=1, heights=c(1,2))
ggsave(file = img_out, plot = image, width = 5.2, height = 6.4)
}
# here's the loop
for(atrow in seq(1, nrow(alldata), by=500) %>% .[which(. >= 400)]){
plot_landscape(alldata %>% slice(1:atrow), paste(dir_out, "/", atrow, ".png", sep=""))
}
# this plot function can be called in a loop for live monitoring!
plot_landscape <- function(data, img_out){
# just averages the ~5 consecutive readings
fluordata <- data %>%
filter(abs(P_act - P_set) < 1) %>%
filter(intensity > 30) %>%
group_by(P_set, T_set, wl_em, state, file) %>%
summarize(
intensity = mean(intensity),
watch = mean(watch),
T_act = mean(T_act),
P_act = mean(P_act)
)
# effective spread that makes sure 440/490 msmts are properly paired
fluordata_440 <- fluordata %>%
filter(wl_em == 440) %>%
mutate(state_match = state)
fluordata_490 <- fluordata %>%
filter(wl_em == 490) %>%
mutate(state_match = state-1)
gpdata <- fluordata_440 %>%
left_join(fluordata_490, by=c("T_set", "P_set", "state_match"), suffix=c("_440", "_490")) %>%
group_by(P_set, T_set, state_match, file_440) %>%
drop_na() %>%
dplyr::mutate(
gp = (intensity_440-intensity_490)/(intensity_440+intensity_490),
T_act = mean(mapply(T_act_440, T_act_490, FUN=mean)),
P_act = mean(mapply(P_act_440, P_act_490, FUN=mean))
) %>%
# drop outliers
group_by(T_set) %>%
filter(between(gp, mean(gp, na.rm=TRUE) - (2.5 * sd(gp, na.rm=TRUE)),
mean(gp, na.rm=TRUE) + (2.5 * sd(gp, na.rm=TRUE))))
# simple scatterplot of P/T
plot_pt <- data %>%
select(clock, T_act, P_act) %>%
arrange(clock) %>%
mutate(age = difftime(last(clock), clock, units = "sec") %>% as.numeric()) %>%
ggplot(aes(x = T_act, y = P_act, color = age)) +
geom_point(alpha = 0.017) +
xlim(range_t) +
ylim(0, max(range_p)) +
scale_y_reverse() +
scale_color_gradient(low="red", high="white", na.value = "white", limits = c(0, 600)) +
theme_pubr() +
theme(legend.position = "none") +
theme(
plot.title = element_text(color = "white"),
axis.title = element_text(color = "white"),
axis.text = element_text(color = "white"),
axis.line = element_line(color = "white"),
axis.ticks = element_line(color = "white"),
panel.background = element_rect(fill = "black", color = NA),
plot.background = element_rect(fill = "black", color = NA)
) +
ggtitle("Cubette state") +
labs(x="Temperature (deg C)", y="Pressure (bar)")
nox <- 100
noy <- 100
# interpolated field plot of GP
plot_gp <- gpdata %>%
ungroup() %>%
select(T_act, P_act, gp) %>%
# interpolate!
mba.surf(no.X=nox, no.Y=noy, extend=TRUE) %>%
.$xyz.est %>%
reshape2::melt(.$z, varnames = c('T_act_sc', 'P_act_sc'), value.name = 'gp') %>%
as_tibble() %>%
drop_na() %>%
# rescale
mutate(
P_act = P_act_sc/noy * (max(alldata$P_act)-min(alldata$P_act)) + min(alldata$P_act),
T_act = T_act_sc/nox * (max(alldata$T_act)-min(alldata$T_act)) + min(alldata$T_act)
) %>%
#filter((P_act >= 0) & (T_act >= 0)) %>%
ggplot(aes(x=T_act, y=P_act, z=gp, fill=gp)) +
geom_raster() +
geom_contour(color="grey", bins=10) +
scale_fill_distiller(palette="YlGnBu", direction=1) +
geom_point(data = gpdata, color = "black", alpha=0.2, shape=1) +
xlim(range_t) +
ylim(0, max(range_p)) +
scale_y_reverse() +
theme_pubr() +
#theme(legend.position = "bottom") +
theme(legend.position = "none") +
theme(
plot.title = element_text(color = "white"),
axis.title = element_text(color = "white"),
axis.text = element_text(color = "white"),
axis.line = element_line(color = "white"),
axis.ticks = element_line(color = "white"),
panel.background = element_rect(fill = "black", color = NA),
plot.background = element_rect(fill = "black", color = NA)
) +
ggtitle("GP vs. Pressure vs. Temperature") +
labs(x="Temperature (deg C)", y="Pressure (bar)", fill="Laurdan GP") +
guides(fill = guide_colourbar(label.theme = element_text(angle = 45, vjust=0.5)))
message(img_out)
image <- arrangeGrob(plot_pt, plot_gp, ncol=1, heights=c(1,2))
ggsave(file = img_out, plot = image, width = 5.2, height = 6.4)
}
# here's the loop
for(atrow in seq(1, nrow(alldata), by=500) %>% .[which(. >= 400)]){
plot_landscape(alldata %>% slice(1:atrow), paste(dir_out, "/", atrow, ".png", sep=""))
}
gpdata %>%
ungroup() %>%
select(T_act, P_act, gp) %>%
# interpolate!
mba.surf(no.X=nox, no.Y=noy, extend=TRUE) %>%
.$xyz.est %>%
reshape2::melt(.$z, varnames = c('T_act_sc', 'P_act_sc'), value.name = 'gp') %>%
as_tibble() %>%
drop_na() %>%
# rescale
mutate(
P_act = P_act_sc/noy * (max(alldata$P_act)-min(alldata$P_act)) + min(alldata$P_act),
T_act = T_act_sc/nox * (max(alldata$T_act)-min(alldata$T_act)) + min(alldata$T_act)
) %>%
#filter((P_act >= 0) & (T_act >= 0)) %>%
ggplot(aes(x=T_act, y=P_act, z=gp, fill=gp)) +
geom_raster() +
geom_contour(color="grey", bins=10) +
scale_fill_distiller(palette="YlGnBu", direction=1) +
geom_point(data = gpdata, color = "black", alpha=0.2, shape=1) +
xlim(range_t) +
scale_y_reverse(lims = c(0, max(range_p))) +
theme_pubr() +
#theme(legend.position = "bottom") +
theme(legend.position = "none") +
theme(
plot.title = element_text(color = "white"),
axis.title = element_text(color = "white"),
axis.text = element_text(color = "white"),
axis.line = element_line(color = "white"),
axis.ticks = element_line(color = "white"),
panel.background = element_rect(fill = "black", color = NA),
plot.background = element_rect(fill = "black", color = NA)
) +
ggtitle("GP vs. Pressure vs. Temperature") +
labs(x="Temperature (deg C)", y="Pressure (bar)", fill="Laurdan GP") +
guides(fill = guide_colourbar(label.theme = element_text(angle = 45, vjust=0.5)))
# this plot function can be called in a loop for live monitoring!
plot_landscape <- function(data, img_out){
# just averages the ~5 consecutive readings
fluordata <- data %>%
filter(abs(P_act - P_set) < 1) %>%
filter(intensity > 30) %>%
group_by(P_set, T_set, wl_em, state, file) %>%
summarize(
intensity = mean(intensity),
watch = mean(watch),
T_act = mean(T_act),
P_act = mean(P_act)
)
# effective spread that makes sure 440/490 msmts are properly paired
fluordata_440 <- fluordata %>%
filter(wl_em == 440) %>%
mutate(state_match = state)
fluordata_490 <- fluordata %>%
filter(wl_em == 490) %>%
mutate(state_match = state-1)
gpdata <- fluordata_440 %>%
left_join(fluordata_490, by=c("T_set", "P_set", "state_match"), suffix=c("_440", "_490")) %>%
group_by(P_set, T_set, state_match, file_440) %>%
drop_na() %>%
dplyr::mutate(
gp = (intensity_440-intensity_490)/(intensity_440+intensity_490),
T_act = mean(mapply(T_act_440, T_act_490, FUN=mean)),
P_act = mean(mapply(P_act_440, P_act_490, FUN=mean))
) %>%
# drop outliers
group_by(T_set) %>%
filter(between(gp, mean(gp, na.rm=TRUE) - (2.5 * sd(gp, na.rm=TRUE)),
mean(gp, na.rm=TRUE) + (2.5 * sd(gp, na.rm=TRUE))))
# simple scatterplot of P/T
plot_pt <- data %>%
select(clock, T_act, P_act) %>%
arrange(clock) %>%
mutate(age = difftime(last(clock), clock, units = "sec") %>% as.numeric()) %>%
ggplot(aes(x = T_act, y = P_act, color = age)) +
geom_point(alpha = 0.017) +
xlim(range_t) +
scale_y_reverse(lims = c(0, max(range_p))) +
scale_color_gradient(low="red", high="white", na.value = "white", limits = c(0, 600)) +
theme_pubr() +
theme(legend.position = "none") +
theme(
plot.title = element_text(color = "white"),
axis.title = element_text(color = "white"),
axis.text = element_text(color = "white"),
axis.line = element_line(color = "white"),
axis.ticks = element_line(color = "white"),
panel.background = element_rect(fill = "black", color = NA),
plot.background = element_rect(fill = "black", color = NA)
) +
ggtitle("Cubette state") +
labs(x="Temperature (deg C)", y="Pressure (bar)")
nox <- 100
noy <- 100
# interpolated field plot of GP
plot_gp <- gpdata %>%
ungroup() %>%
select(T_act, P_act, gp) %>%
# interpolate!
mba.surf(no.X=nox, no.Y=noy, extend=TRUE) %>%
.$xyz.est %>%
reshape2::melt(.$z, varnames = c('T_act_sc', 'P_act_sc'), value.name = 'gp') %>%
as_tibble() %>%
drop_na() %>%
# rescale
mutate(
P_act = P_act_sc/noy * (max(alldata$P_act)-min(alldata$P_act)) + min(alldata$P_act),
T_act = T_act_sc/nox * (max(alldata$T_act)-min(alldata$T_act)) + min(alldata$T_act)
) %>%
#filter((P_act >= 0) & (T_act >= 0)) %>%
ggplot(aes(x=T_act, y=P_act, z=gp, fill=gp)) +
geom_raster() +
geom_contour(color="grey", bins=10) +
scale_fill_distiller(palette="YlGnBu", direction=1) +
geom_point(data = gpdata, color = "black", alpha=0.2, shape=1) +
xlim(range_t) +
scale_y_reverse(lims = c(0, max(range_p))) +
theme_pubr() +
#theme(legend.position = "bottom") +
theme(legend.position = "none") +
theme(
plot.title = element_text(color = "white"),
axis.title = element_text(color = "white"),
axis.text = element_text(color = "white"),
axis.line = element_line(color = "white"),
axis.ticks = element_line(color = "white"),
panel.background = element_rect(fill = "black", color = NA),
plot.background = element_rect(fill = "black", color = NA)
) +
ggtitle("GP vs. Pressure vs. Temperature") +
labs(x="Temperature (deg C)", y="Pressure (bar)", fill="Laurdan GP") +
guides(fill = guide_colourbar(label.theme = element_text(angle = 45, vjust=0.5)))
message(img_out)
image <- arrangeGrob(plot_pt, plot_gp, ncol=1, heights=c(1,2))
ggsave(file = img_out, plot = image, width = 5.2, height = 6.4)
}
# here's the loop
for(atrow in seq(1, nrow(alldata), by=500) %>% .[which(. >= 400)]){
plot_landscape(alldata %>% slice(1:atrow), paste(dir_out, "/", atrow, ".png", sep=""))
}
# this plot function can be called in a loop for live monitoring!
plot_landscape <- function(data, img_out){
# just averages the ~5 consecutive readings
fluordata <- data %>%
filter(abs(P_act - P_set) < 1) %>%
filter(intensity > 30) %>%
group_by(P_set, T_set, wl_em, state, file) %>%
summarize(
intensity = mean(intensity),
watch = mean(watch),
T_act = mean(T_act),
P_act = mean(P_act)
)
# effective spread that makes sure 440/490 msmts are properly paired
fluordata_440 <- fluordata %>%
filter(wl_em == 440) %>%
mutate(state_match = state)
fluordata_490 <- fluordata %>%
filter(wl_em == 490) %>%
mutate(state_match = state-1)
gpdata <- fluordata_440 %>%
left_join(fluordata_490, by=c("T_set", "P_set", "state_match"), suffix=c("_440", "_490")) %>%
group_by(P_set, T_set, state_match, file_440) %>%
drop_na() %>%
dplyr::mutate(
gp = (intensity_440-intensity_490)/(intensity_440+intensity_490),
T_act = mean(mapply(T_act_440, T_act_490, FUN=mean)),
P_act = mean(mapply(P_act_440, P_act_490, FUN=mean))
) %>%
# drop outliers
group_by(T_set) %>%
filter(between(gp, mean(gp, na.rm=TRUE) - (2.5 * sd(gp, na.rm=TRUE)),
mean(gp, na.rm=TRUE) + (2.5 * sd(gp, na.rm=TRUE))))
# simple scatterplot of P/T
plot_pt <- data %>%
select(clock, T_act, P_act) %>%
arrange(clock) %>%
mutate(age = difftime(last(clock), clock, units = "sec") %>% as.numeric()) %>%
ggplot(aes(x = T_act, y = P_act, color = age)) +
geom_point(alpha = 0.017) +
xlim(range_t) +
scale_y_reverse(limits = c(0, max(range_p))) +
scale_color_gradient(low="red", high="white", na.value = "white", limits = c(0, 600)) +
theme_pubr() +
theme(legend.position = "none") +
theme(
plot.title = element_text(color = "white"),
axis.title = element_text(color = "white"),
axis.text = element_text(color = "white"),
axis.line = element_line(color = "white"),
axis.ticks = element_line(color = "white"),
panel.background = element_rect(fill = "black", color = NA),
plot.background = element_rect(fill = "black", color = NA)
) +
ggtitle("Cubette state") +
labs(x="Temperature (deg C)", y="Pressure (bar)")
nox <- 100
noy <- 100
# interpolated field plot of GP
plot_gp <- gpdata %>%
ungroup() %>%
select(T_act, P_act, gp) %>%
# interpolate!
mba.surf(no.X=nox, no.Y=noy, extend=TRUE) %>%
.$xyz.est %>%
reshape2::melt(.$z, varnames = c('T_act_sc', 'P_act_sc'), value.name = 'gp') %>%
as_tibble() %>%
drop_na() %>%
# rescale
mutate(
P_act = P_act_sc/noy * (max(alldata$P_act)-min(alldata$P_act)) + min(alldata$P_act),
T_act = T_act_sc/nox * (max(alldata$T_act)-min(alldata$T_act)) + min(alldata$T_act)
) %>%
#filter((P_act >= 0) & (T_act >= 0)) %>%
ggplot(aes(x=T_act, y=P_act, z=gp, fill=gp)) +
geom_raster() +
geom_contour(color="grey", bins=10) +
scale_fill_distiller(palette="YlGnBu", direction=1) +
geom_point(data = gpdata, color = "black", alpha=0.2, shape=1) +
xlim(range_t) +
scale_y_reverse(limits = c(0, max(range_p))) +
theme_pubr() +
#theme(legend.position = "bottom") +
theme(legend.position = "none") +
theme(
plot.title = element_text(color = "white"),
axis.title = element_text(color = "white"),
axis.text = element_text(color = "white"),
axis.line = element_line(color = "white"),
axis.ticks = element_line(color = "white"),
panel.background = element_rect(fill = "black", color = NA),
plot.background = element_rect(fill = "black", color = NA)
) +
ggtitle("GP vs. Pressure vs. Temperature") +
labs(x="Temperature (deg C)", y="Pressure (bar)", fill="Laurdan GP") +
guides(fill = guide_colourbar(label.theme = element_text(angle = 45, vjust=0.5)))
message(img_out)
image <- arrangeGrob(plot_pt, plot_gp, ncol=1, heights=c(1,2))
ggsave(file = img_out, plot = image, width = 5.2, height = 6.4)
}
# here's the loop
for(atrow in seq(1, nrow(alldata), by=500) %>% .[which(. >= 400)]){
plot_landscape(alldata %>% slice(1:atrow), paste(dir_out, "/", atrow, ".png", sep=""))
}
# load files (once!)
files_data <- list.files(path = dir_data, pattern = pat_data, full.names = T)
alldata <- files_data %>%
lapply(
function(file_data){
data_this_file <- file_data %>%
read_tsv() %>%
mutate(file = file_data %>% basename())
return(data_this_file)
}
) %>%
do.call(rbind, .)
range_p = c(min(alldata$P_act), max(alldata$P_act))
range_t = c(min(alldata$T_act), max(alldata$T_act))
# this plot function can be called in a loop for live monitoring!
plot_landscape <- function(data, img_out){
# just averages the ~5 consecutive readings
fluordata <- data %>%
filter(abs(P_act - P_set) < 1) %>%
filter(intensity > 30) %>%
group_by(P_set, T_set, wl_em, state, file) %>%
summarize(
intensity = mean(intensity),
watch = mean(watch),
T_act = mean(T_act),
P_act = mean(P_act)
)
# effective spread that makes sure 440/490 msmts are properly paired
fluordata_440 <- fluordata %>%
filter(wl_em == 440) %>%
mutate(state_match = state)
fluordata_490 <- fluordata %>%
filter(wl_em == 490) %>%
mutate(state_match = state-1)
gpdata <- fluordata_440 %>%
left_join(fluordata_490, by=c("T_set", "P_set", "state_match"), suffix=c("_440", "_490")) %>%
group_by(P_set, T_set, state_match, file_440) %>%
drop_na() %>%
dplyr::mutate(
gp = (intensity_440-intensity_490)/(intensity_440+intensity_490),
T_act = mean(mapply(T_act_440, T_act_490, FUN=mean)),
P_act = mean(mapply(P_act_440, P_act_490, FUN=mean))
) %>%
# drop outliers
group_by(T_set) %>%
filter(between(gp, mean(gp, na.rm=TRUE) - (2.5 * sd(gp, na.rm=TRUE)),
mean(gp, na.rm=TRUE) + (2.5 * sd(gp, na.rm=TRUE))))
# simple scatterplot of P/T
plot_pt <- data %>%
select(clock, T_act, P_act) %>%
arrange(clock) %>%
mutate(age = difftime(last(clock), clock, units = "sec") %>% as.numeric()) %>%
ggplot(aes(x = T_act, y = P_act, color = age)) +
geom_point(alpha = 0.017) +
xlim(range_t) +
scale_y_reverse(limits = c(max(range_p), 0)) +
scale_color_gradient(low="red", high="white", na.value = "white", limits = c(0, 600)) +
theme_pubr() +
theme(legend.position = "none") +
theme(
plot.title = element_text(color = "white"),
axis.title = element_text(color = "white"),
axis.text = element_text(color = "white"),
axis.line = element_line(color = "white"),
axis.ticks = element_line(color = "white"),
panel.background = element_rect(fill = "black", color = NA),
plot.background = element_rect(fill = "black", color = NA)
) +
ggtitle("Cubette state") +
labs(x="Temperature (deg C)", y="Pressure (bar)")
nox <- 100
noy <- 100
# interpolated field plot of GP
plot_gp <- gpdata %>%
ungroup() %>%
select(T_act, P_act, gp) %>%
# interpolate!
mba.surf(no.X=nox, no.Y=noy, extend=TRUE) %>%
.$xyz.est %>%
reshape2::melt(.$z, varnames = c('T_act_sc', 'P_act_sc'), value.name = 'gp') %>%
as_tibble() %>%
drop_na() %>%
# rescale
mutate(
P_act = P_act_sc/noy * (max(alldata$P_act)-min(alldata$P_act)) + min(alldata$P_act),
T_act = T_act_sc/nox * (max(alldata$T_act)-min(alldata$T_act)) + min(alldata$T_act)
) %>%
#filter((P_act >= 0) & (T_act >= 0)) %>%
ggplot(aes(x=T_act, y=P_act, z=gp, fill=gp)) +
geom_raster() +
geom_contour(color="grey", bins=10) +
scale_fill_distiller(palette="YlGnBu", direction=1) +
geom_point(data = gpdata, color = "black", alpha=0.2, shape=1) +
xlim(range_t) +
scale_y_reverse(limits = c(max(range_p), 0)) +
theme_pubr() +
#theme(legend.position = "bottom") +
theme(legend.position = "none") +
theme(
plot.title = element_text(color = "white"),
axis.title = element_text(color = "white"),
axis.text = element_text(color = "white"),
axis.line = element_line(color = "white"),
axis.ticks = element_line(color = "white"),
panel.background = element_rect(fill = "black", color = NA),
plot.background = element_rect(fill = "black", color = NA)
) +
ggtitle("GP vs. Pressure vs. Temperature") +
labs(x="Temperature (deg C)", y="Pressure (bar)", fill="Laurdan GP") +
guides(fill = guide_colourbar(label.theme = element_text(angle = 45, vjust=0.5)))
message(img_out)
image <- arrangeGrob(plot_pt, plot_gp, ncol=1, heights=c(1,2))
ggsave(file = img_out, plot = image, width = 5.2, height = 6.4)
}
# here's the loop
for(atrow in seq(1, nrow(alldata), by=500) %>% .[which(. >= 400)]){
plot_landscape(alldata %>% slice(1:atrow), paste(dir_out, "/", atrow, ".png", sep=""))
}
clear()
cls()
clearPushBack()
